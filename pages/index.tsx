// import lamejs from 'lamejs'
// components
import Head from 'next/head'
import Card from '@/components/Card'
import { Container, Space, Stack, Title } from '@mantine/core'
// hooks
import { useEffect, useRef, useState } from 'react'
import { useDisclosure } from '@mantine/hooks'
// data
import podcast from '../data/podcast.json'
import TheModal from '@/components/Modal'
import RecordButton from '@/components/RecordButton'

export default function Home() {
  const [opened, handlers] = useDisclosure(false)
  const [audio, setAudio] = useState('')
  const audioRef = useRef<HTMLAudioElement>(null)
  const [playing, setPlaying] = useState(false)
  const [recording, setRecording] = useState(false)
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null)
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null)

  useEffect(() => {
    async function getMedia() {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      const newMediaRecorder = new MediaRecorder(stream)
      setMediaRecorder(newMediaRecorder)
    }
    getMedia()
  }, [])

  const startRecording = () => {
    if (mediaRecorder) {
      mediaRecorder.start()
      setRecording(true)
      mediaRecorder.addEventListener('dataavailable', (event: BlobEvent) => {
        setAudioBlob(event.data)
      })
    }
  }

  const stopRecording = () => {
    if (mediaRecorder) {
      mediaRecorder.stop()
      setRecording(false)
      handlers.toggle()
    }
  }

  const downloadAudio = () => {
    if (audioBlob) {
      const url = URL.createObjectURL(audioBlob)
      const link = document.createElement('a')
      link.href = url!
      link.download = 'record.wav'
      link.click()
    }
  }

  const toggleRecording = () => {
    if (recording) {
      stopRecording()
    } else {
      startRecording()
    }
  }

  const handleCardClick = (url: string) => {
    if (url === audioRef?.current?.src && playing) {
      audioRef.current.pause()
      setPlaying(!playing)
    } else {
      audioRef!.current!.src = url
      audioRef?.current?.play()
      if (!playing) setPlaying(!playing)
    }
    setAudio(url)
  }

  const { item } = podcast.rss.channel

  return (
    <>
      <Head>
        <title>Toldo testik</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Title order={3}>All episodes</Title>
          <Space h="md" />
          <Stack spacing={'lg'}>
            {item.map((item, id) => (
              <Card key={id} item={item} onCardClick={handleCardClick} />
            ))}
          </Stack>
        </Container>

        <RecordButton recording={recording} onToggleRecording={toggleRecording} />

        <TheModal opened={opened} onClose={handlers.close} onDownloadAudio={downloadAudio} />

        <audio id="my-audio" ref={audioRef} src={''}></audio>
      </main>
    </>
  )
}
